#!/usr/bin/env python3
"""
Script d'installation et de configuration pour le scanner DTC CAN-Bus
Automatise l'installation des d√©pendances Python et la configuration de l'environnement
"""

import os
import sys
import subprocess
import argparse
import venv
from pathlib import Path

def run_command(cmd, check=True, shell=False):
    """Ex√©cute une commande et retourne le r√©sultat"""
    try:
        if shell:
            result = subprocess.run(cmd, shell=True, check=check, 
                                  capture_output=True, text=True)
        else:
            result = subprocess.run(cmd, check=check, 
                                  capture_output=True, text=True)
        return result
    except subprocess.CalledProcessError as e:
        print(f"Erreur lors de l'ex√©cution de: {' '.join(cmd) if not shell else cmd}")
        print(f"Code de retour: {e.returncode}")
        print(f"Sortie d'erreur: {e.stderr}")
        if check:
            sys.exit(1)
        return e

def check_python_version():
    """V√©rifie que Python 3.7+ est disponible"""
    if sys.version_info < (3, 7):
        print("‚ùå Python 3.7 ou sup√©rieur requis")
        print(f"Version actuelle: {sys.version}")
        sys.exit(1)
    print(f"‚úÖ Python {sys.version_info.major}.{sys.version_info.minor} d√©tect√©")

def create_virtual_environment(venv_path):
    """Cr√©e un environnement virtuel Python"""
    print(f"üì¶ Cr√©ation de l'environnement virtuel dans {venv_path}...")
    
    if venv_path.exists():
        print(f"‚ö†Ô∏è  L'environnement virtuel existe d√©j√† dans {venv_path}")
        response = input("Voulez-vous le recr√©er? (y/N): ").lower().strip()
        if response == 'y':
            import shutil
            shutil.rmtree(venv_path)
        else:
            print("‚ÑπÔ∏è  Utilisation de l'environnement existant")
            return venv_path
    
    try:
        venv.create(venv_path, with_pip=True)
        print("‚úÖ Environnement virtuel cr√©√©")
        return venv_path
    except Exception as e:
        print(f"‚ùå Erreur lors de la cr√©ation de l'environnement virtuel: {e}")
        sys.exit(1)

def get_pip_path(venv_path):
    """Retourne le chemin vers pip dans l'environnement virtuel"""
    if os.name == 'nt':  # Windows
        return venv_path / "Scripts" / "pip"
    else:  # Unix/Linux/macOS
        return venv_path / "bin" / "pip"

def get_python_path(venv_path):
    """Retourne le chemin vers python dans l'environnement virtuel"""
    if os.name == 'nt':  # Windows
        return venv_path / "Scripts" / "python"
    else:  # Unix/Linux/macOS
        return venv_path / "bin" / "python"

def install_python_dependencies(venv_path):
    """Installe les d√©pendances Python dans l'environnement virtuel"""
    pip_path = get_pip_path(venv_path)
    
    # Mise √† jour de pip
    print("üîÑ Mise √† jour de pip...")
    run_command([str(pip_path), "install", "--upgrade", "pip"])
    
    # D√©pendances principales
    dependencies = [
        "python-can>=4.0.0",
        "can-isotp>=2.0.0",
    ]
    
    # D√©pendances optionnelles pour de meilleures fonctionnalit√©s
    optional_dependencies = [
        "colorama",  # Pour les couleurs sur Windows
        "psutil",    # Pour la d√©tection syst√®me
    ]
    
    print("üì¶ Installation des d√©pendances principales...")
    for dep in dependencies:
        print(f"   Installing {dep}...")
        run_command([str(pip_path), "install", dep])
    
    print("üì¶ Installation des d√©pendances optionnelles...")
    for dep in optional_dependencies:
        print(f"   Installing {dep}...")
        # Ne pas √©chouer si les d√©pendances optionnelles ne s'installent pas
        run_command([str(pip_path), "install", dep], check=False)
    
    print("‚úÖ D√©pendances Python install√©es")

def create_activation_script(venv_path, project_path):
    """Cr√©e un script d'activation pratique"""
    script_content = f"""#!/bin/bash
# Script d'activation pour le scanner DTC CAN-Bus

SCRIPT_DIR="$(cd "$(dirname "${{BASH_SOURCE[0]}}")" && pwd)"
VENV_PATH="{venv_path}"

echo "üöÄ Activation de l'environnement de d√©veloppement..."

# Activer l'environnement virtuel
source "$VENV_PATH/bin/activate"

# Changer vers le r√©pertoire du projet
cd "$SCRIPT_DIR"

echo "‚úÖ Environnement activ√©!"
echo "üìÅ R√©pertoire: $(pwd)"
echo "üêç Python: $(which python)"
echo ""
echo "Commandes disponibles:"
echo "  python main.py --help           # Aide du scanner DTC"
echo "  sudo ./setup_can.sh --help      # Aide configuration CAN"
echo "  sudo ./setup_can.sh --status    # Statut des interfaces CAN"
echo "  deactivate                      # D√©sactiver l'environnement"
echo ""

# Lancer un shell interactif
exec bash
"""
    
    activate_script = project_path / "activate_env.sh"
    with open(activate_script, 'w') as f:
        f.write(script_content)
    
    os.chmod(activate_script, 0o755)
    print(f"‚úÖ Script d'activation cr√©√©: {activate_script}")

def create_requirements_file(project_path):
    """Cr√©e un fichier requirements.txt"""
    requirements_content = """# D√©pendances pour le scanner DTC CAN-Bus
python-can>=4.0.0
can-isotp>=2.0.0

# D√©pendances optionnelles
colorama>=0.4.0
psutil>=5.0.0
"""
    
    requirements_file = project_path / "requirements.txt"
    with open(requirements_file, 'w') as f:
        f.write(requirements_content)
    
    print(f"‚úÖ Fichier requirements.txt cr√©√©")

def check_system_dependencies():
    """V√©rifie les d√©pendances syst√®me"""
    print("üîç V√©rification des d√©pendances syst√®me...")
    
    # V√©rifier can-utils
    try:
        result = run_command(["which", "cansend"], check=False)
        if result.returncode == 0:
            print("‚úÖ can-utils install√©")
        else:
            print("‚ö†Ô∏è  can-utils non trouv√©")
            print("   Installez avec: sudo apt-get install can-utils  (Ubuntu/Debian)")
            print("   Ou utilisez: sudo ./setup_can.sh  (installation automatique)")
    except:
        print("‚ö†Ô∏è  Impossible de v√©rifier can-utils")
    
    # V√©rifier les modules kernel CAN
    try:
        result = run_command(["lsmod"], check=False)
        if "can" in result.stdout:
            print("‚úÖ Modules CAN kernel charg√©s")
        else:
            print("‚ö†Ô∏è  Modules CAN kernel non charg√©s")
            print("   Chargez avec: sudo modprobe can can_raw")
            print("   Ou utilisez: sudo ./setup_can.sh  (configuration automatique)")
    except:
        print("‚ö†Ô∏è  Impossible de v√©rifier les modules kernel")

def test_installation(venv_path):
    """Teste l'installation"""
    python_path = get_python_path(venv_path)
    
    print("üß™ Test de l'installation...")
    
    # Test d'import des modules
    test_script = '''
import sys
try:
    import can
    print("‚úÖ python-can import√©")
    print(f"   Version: {can.__version__}")
except ImportError as e:
    print(f"‚ùå Erreur import python-can: {e}")
    sys.exit(1)

try:
    import isotp
    print("‚úÖ can-isotp import√©")
    print(f"   Version: {isotp.__version__}")
except ImportError as e:
    print(f"‚ùå Erreur import can-isotp: {e}")
    sys.exit(1)

print("‚úÖ Tous les modules sont importables")
'''
    
    try:
        result = run_command([str(python_path), "-c", test_script])
        print(result.stdout)
        print("‚úÖ Test d'installation r√©ussi")
    except Exception as e:
        print(f"‚ùå Test d'installation √©chou√©: {e}")

def main():
    parser = argparse.ArgumentParser(
        description="Installation et configuration du scanner DTC CAN-Bus"
    )
    parser.add_argument(
        "--venv-name", 
        default="venv",
        help="Nom de l'environnement virtuel (d√©faut: venv)"
    )
    parser.add_argument(
        "--no-test",
        action="store_true",
        help="Ne pas tester l'installation"
    )
    parser.add_argument(
        "--system-check-only",
        action="store_true",
        help="V√©rifier seulement les d√©pendances syst√®me"
    )
    
    args = parser.parse_args()
    
    # D√©terminer les chemins
    project_path = Path(__file__).parent.absolute()
    venv_path = project_path / args.venv_name
    
    print("üîß Installation du scanner DTC CAN-Bus")
    print(f"üìÅ R√©pertoire projet: {project_path}")
    print(f"üêç Environnement virtuel: {venv_path}")
    print()
    
    # V√©rification syst√®me uniquement
    if args.system_check_only:
        check_system_dependencies()
        return
    
    # V√©rifications pr√©liminaires
    check_python_version()
    check_system_dependencies()
    
    # Installation Python
    create_virtual_environment(venv_path)
    install_python_dependencies(venv_path)
    
    # Cr√©ation des fichiers utiles
    create_requirements_file(project_path)
    create_activation_script(venv_path, project_path)
    
    # Test de l'installation
    if not args.no_test:
        test_installation(venv_path)
    
    print()
    print("üéâ Installation termin√©e avec succ√®s!")
    print()
    print("üìã Prochaines √©tapes:")
    print(f"   1. Configuration CAN: sudo ./setup_can.sh")
    print(f"   2. Activation env:    source {venv_path}/bin/activate")
    print(f"   3. Ou utilisez:       ./activate_env.sh")
    print(f"   4. Test scanner:      python main.py --help")
    print()
    print("üí° Conseils:")
    print("   ‚Ä¢ Utilisez './activate_env.sh' pour un environnement pr√™t √† l'emploi")
    print("   ‚Ä¢ Consultez le README.md pour plus d'informations")
    print("   ‚Ä¢ Utilisez 'sudo ./setup_can.sh --status' pour v√©rifier les interfaces CAN")

if __name__ == "__main__":
    main()